<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.omnigroup.com/namespace/OmniOutliner/xmloutline-v5.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0?>
<outline xmlns="http://www.omnigroup.com/namespace/OmniOutliner/v5" type-of-file-on-disk="package">
  <style-attribute-registry>
    <style-attribute version="0" key="font-family" group="字体" name="系列" class="string">Helvetica</style-attribute>
    <style-attribute version="1" key="font-fill" group="字体" name="填充颜色" class="color">
      <color space="gg22" w="0"/>
    </style-attribute>
    <style-attribute version="0" key="font-italic" group="字体" name="斜体" class="bool">no</style-attribute>
    <style-attribute version="0" key="font-size" group="字体" name="大小" class="number" integral="0" min="1" max="65536">12</style-attribute>
    <style-attribute version="0" key="font-weight" group="字体" name="粗细" class="number" integral="1" min="1" max="14">5</style-attribute>
    <style-attribute version="0" key="heading-type(com.omnigroup.OmniOutliner)" group="标题" name="类型" class="string">None</style-attribute>
    <style-attribute version="0" key="item-handle-mode(com.omnigroup.OmniOutliner)" group="行" name="绘图控点" class="enum">
      <enum-name-table default-value="0">
        <enum-name-table-element value="0" name="always" display-name="总是"/>
        <enum-name-table-element value="1" name="never" display-name="永不"/>
        <enum-name-table-element value="2" name="hover" display-name="盘旋"/>
      </enum-name-table>
    </style-attribute>
    <style-attribute version="0" key="item-row-padding(com.omnigroup.OmniOutliner)" group="行" name="行填充" class="number" integral="1" min="0" max="1000">4</style-attribute>
    <style-attribute version="0" key="paragraph-alignment" group="段落" name="对齐" class="enum">
      <enum-name-table default-value="4">
        <enum-name-table-element value="0" name="left" display-name="左"/>
        <enum-name-table-element value="1" name="right" display-name="右"/>
        <enum-name-table-element value="2" name="center" display-name="居中"/>
        <enum-name-table-element value="3" name="justified" display-name="两边对齐"/>
        <enum-name-table-element value="4" name="natural" display-name="自然"/>
      </enum-name-table>
    </style-attribute>
    <style-attribute version="0" key="paragraph-base-writing-direction" group="段落" name="书写方向" class="enum">
      <enum-name-table default-value="-1">
        <enum-name-table-element value="-1" name="natural" display-name="自然"/>
        <enum-name-table-element value="0" name="left-to-right" display-name="从左到右"/>
        <enum-name-table-element value="1" name="right-to-left" display-name="从右到左"/>
      </enum-name-table>
    </style-attribute>
    <style-attribute version="0" key="paragraph-line-height-multiple" group="段落" name="行高度倍数" class="number" integral="0" min="0" max="1000">0</style-attribute>
    <style-attribute version="1" key="strikethrough-color" group="删除线" name="颜色" class="color">
      <color space="gg22" w="0"/>
    </style-attribute>
    <style-attribute version="0" key="text-background-color" group="文本" name="背景颜色" class="color">
      <color space="gg22" w="0" a="0"/>
    </style-attribute>
    <style-attribute version="1" key="underline-color" group="下划线" name="颜色" class="color">
      <color space="gg22" w="0"/>
    </style-attribute>
    <style-attribute version="1" key="underline-style" group="下划线" name="样式" class="enum">
      <enum-name-table default-value="0">
        <enum-name-table-element value="0" name="none" display-name="无"/>
        <enum-name-table-element value="1" name="single" display-name="单倍行距"/>
        <enum-name-table-element value="2" name="thick" display-name="浓"/>
        <enum-name-table-element value="9" name="double" display-name="双线"/>
      </enum-name-table>
    </style-attribute>
  </style-attribute-registry>
  <named-styles>
    <named-style id="dGxdp2kIDOV" name="Heading 1" display-order="0" display-name="标头 1">
      <style>
        <value key="font-family">Helvetica Neue</value>
        <value key="font-size">32</value>
        <value key="font-weight">3</value>
      </style>
    </named-style>
    <named-style id="l8oM-UgkRJq" name="Heading 2" display-order="1" display-name="标头 2">
      <style>
        <value key="font-family">Helvetica Neue</value>
        <value key="font-size">24</value>
      </style>
    </named-style>
    <named-style id="hztLM6dQ_J0" name="Heading 3" display-order="2" display-name="标头 3">
      <style>
        <value key="font-family">Helvetica Neue</value>
        <value key="font-size">18</value>
        <value key="font-weight">6</value>
      </style>
    </named-style>
    <named-style id="jCcmkdcQ-PQ" name="Heading 4" display-order="3" display-name="标头 4">
      <style>
        <value key="font-size">15</value>
        <value key="font-weight">9</value>
      </style>
    </named-style>
    <named-style id="dGMRU3f0g7Y" name="Heading 5" display-order="4" display-name="标头 5">
      <style>
        <value key="font-size">13</value>
        <value key="font-weight">9</value>
      </style>
    </named-style>
    <named-style id="a2InX3pJ77O" name="Heading 6" display-order="5" display-name="标头 6">
      <style>
        <value key="font-size">11</value>
        <value key="font-weight">9</value>
      </style>
    </named-style>
    <named-style id="mkE6Cq8Hnsp" name="Highlight 1" display-order="6" display-name="高亮 1">
      <style>
        <value key="font-fill">
          <color space="srgb" r="0.796079" g="0.294118" b="0.0862744"/>
        </value>
      </style>
    </named-style>
    <named-style id="eiFygdH5llS" name="Highlight 2" display-order="7" display-name="高亮 2">
      <style>
        <value key="font-fill">
          <color space="srgb" r="0.14902" g="0.545098" b="0.823529"/>
        </value>
      </style>
    </named-style>
    <named-style id="j20bMJSiJ86" name="Highlight 3" display-order="8" display-name="高亮 3">
      <style>
        <value key="font-fill">
          <color space="srgb" r="0.933334" g="0.909804" b="0.835294"/>
        </value>
        <value key="text-background-color">
          <color space="srgb" r="0.576471" g="0.631372" b="0.631373"/>
        </value>
      </style>
    </named-style>
    <named-style id="nU7Pax9sHwm" name="高亮：黄色" display-order="9">
      <style>
        <value key="text-background-color">
          <color space="srgb" r="1" g="0.774726" b="0" a="0.25"/>
        </value>
      </style>
    </named-style>
    <named-style id="m6c_M2fT6yP" name="高亮：红色" display-order="10">
      <style>
        <value key="text-background-color">
          <color space="srgb" r="0.968049" g="0.472297" b="0.539657" a="0.25"/>
        </value>
      </style>
    </named-style>
    <named-style id="auoqZ5xVKeG" name="高亮：绿色" display-order="11">
      <style>
        <value key="text-background-color">
          <color space="srgb" r="0.470589" g="0.768627" b="0.270588" a="0.25"/>
        </value>
      </style>
    </named-style>
  </named-styles>
  <attachments>
    <attachment id="att3" href="attachments/1308544-20171229133115882-1511607238_1_1_1.jpg" type="image"/>
    <attachment id="att8" href="attachments/969110-20170211112337463-344280279_1.png" type="image"/>
    <attachment id="att5" href="attachments/bVk0W2.png" type="image"/>
    <attachment id="att4" href="attachments/bVkZat.png" type="image"/>
    <attachment id="att7" href="attachments/bVkZav.png" type="image"/>
    <attachment id="att6" href="attachments/bVmxl8.png" type="image"/>
    <attachment id="att0" href="attachments/kafka-zk.png" type="image"/>
    <attachment id="att2" href="attachments/message.png" type="image"/>
    <attachment id="att1" href="attachments/topic.png" type="image"/>
  </attachments>
  <settings>
    <base-style>
      <style>
        <value key="font-family">Lantinghei SC</value>
        <value key="font-fill">
          <color space="srgb" r="0.345098" g="0.431373" b="0.458824"/>
        </value>
        <value key="font-size">13</value>
        <value key="heading-type(com.omnigroup.OmniOutliner)">Numeric</value>
        <value key="item-handle-mode(com.omnigroup.OmniOutliner)">hover</value>
        <value key="item-row-padding(com.omnigroup.OmniOutliner)">3</value>
        <value key="paragraph-base-writing-direction">left-to-right</value>
        <value key="paragraph-line-height-multiple">1.1</value>
        <value key="strikethrough-color">
          <color space="srgb" r="0.345098" g="0.431373" b="0.458824"/>
        </value>
        <value key="text-background-color">
          <color space="srgb" r="0.981767" g="1" b="0.961349"/>
        </value>
        <value key="underline-color">
          <color space="srgb" r="0.345098" g="0.431373" b="0.458824"/>
        </value>
      </style>
    </base-style>
    <margin-color>
      <color space="srgb" r="0.992966" g="0.965902" b="0.890578"/>
    </margin-color>
    <print-info>
      <print-info-key name="OOScaleDocumentToFitPageWidth" type="boolean">true</print-info-key>
    </print-info>
  </settings>
  <outline-title>
    <text>
      <p>
        <run>
          <style>
            <value key="font-family">Helvetica</value>
            <value key="paragraph-alignment">center</value>
          </style>
          <lit><cell variable="OODocumentFilenameVariableIdentifier"/></lit>
        </run>
      </p>
    </text>
  </outline-title>
  <columns id="lkG4XkPee33" is-base-schema="yes" outline-column="jFqHUGd_Dg1" status-column="kAs-9ux279h" note-column="dTpN3JwYpBn">
    <column id="kAs-9ux279h" type="checkbox" minimum-width="13" maximum-width="1000000">
      <title>
        <text>
          <p/>
        </text>
      </title>
    </column>
    <column id="dTpN3JwYpBn" type="text" minimum-width="18" maximum-width="18">
      <style>
        <value key="font-fill">
          <color space="srgb" r="0.396078" g="0.482353" b="0.513726"/>
        </value>
        <value key="font-italic">yes</value>
        <value key="font-size">12</value>
        <value key="strikethrough-color">
          <color space="srgb" r="0.396078" g="0.482353" b="0.513726"/>
        </value>
        <value key="underline-color">
          <color space="srgb" r="0.396078" g="0.482353" b="0.513726"/>
        </value>
      </style>
      <title>
        <text>
          <p/>
        </text>
      </title>
    </column>
    <column id="jFqHUGd_Dg1" type="text" minimum-width="13" maximum-width="1000000">
      <title>
        <text>
          <p>
            <run>
              <lit>主题</lit>
            </run>
          </p>
        </text>
      </title>
    </column>
  </columns>
  <items>
    <style>
      <value key="font-size">18</value>
    </style>
    <item rank="" is-root="yes" schema="lkG4XkPee33" children-are-sections="yes">
      <entry/>
      <entry/>
      <entry/>
    </item>
    <item id="a-ISPmInuxl" parent-id="k-qBsC00zqa" rank="00fd">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>本地缓存：不需要序列化，速度快，缓存的数量与大小受限于本机内存</lit>
          </run>
        </p>
        <p>
          <run>
            <lit>分布式缓存：需要序列化，速度相较于本地缓存较慢，但是理论上缓存的数量与大小无限（因为缓存机器可以不断扩展）</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>常用缓存技术</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aAU4irvwxCy" parent-id="k-qBsC00zqa" rank="00fb">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>JVM architecture</lit>
          </run>
        </p>
        <p>
          <run>
            <lit>JVM = 类加载器 classloader + 执行引擎 execution engine + 运行时数据区域 runtime data area</lit>
          </run>
          <run>
            <lit><cell refid="att4" expanded="yes" name="bVkZat"/></lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>JVM 工作原理</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aDC7UBegVtv" parent-id="h9d3rG-N4_3" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>consumer根据消费能力自主控制消息拉取速度</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aFR6_xWv1XV" parent-id="oz7VQCbW1N8" rank="00fe">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Web servlet module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aJ4UzCGmEpq" parent-id="jYg5Ga4wEnx" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Spring web</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aMahzoj3DiA" parent-id="oz7VQCbW1N8" rank="00fd">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Web module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aQSLETesVvx" parent-id="dS9jaC2joIu" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>PC程序计数器</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aSq5HNL_zDO" parent-id="peFle0OntVk" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Major collection 则会进行 Minor collection，Tenured 世代则进行标记压缩收集</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aTs8N6Pz0Ff" parent-id="fDXlx8ugtLr" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Ehcache：spring默认集成的一个缓存，以spring cache的底层缓存实现类形式去操作缓存的话，非常方便，但是欠缺灵活，如果想要灵活使用，还是要单独使用Ehcache</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aUC1udiNQWi" parent-id="a-ISPmInuxl" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>总结</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aWt9Fo8MXzl" parent-id="k-qBsC00zqa" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>云计算技术</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aYvIy46Jh5P" parent-id="kaWdyXXm38U" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>zookeeper 可以帮助分布式应用以一个共享的树形的命名空间实现协调；</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="a_Plm2aPYih" parent-id="mqUHiUcB0I6" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>原因</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="aaguxDBsg9w" parent-id="l1zpjOeG6q1" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>集群中机器之间互不通信（相较于Jboss cache等集群中机器之间的相互通信的缓存，速度更快&lt;--因为少了同步更新缓存的开销，且更适合于大型分布式系统中使用)</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ae3u0YEAgNR" parent-id="nc-dc9n8qNn" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>当leader 接收到请求之后，将事务请求转化为事务提议（proposal） 并将该proposal 分别入队 （leader 会为每个follower 分别创建一个响应队列用来保证事务提交的顺序）。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="af8OZtoj-qi" parent-id="eTsp9aa4T0g" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit> 提供与第三方持久层框架良好的整合</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="apu8UtSzyef" parent-id="pfyAP2S6mNq" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>措施</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="awEg-8LOAHH" parent-id="lWr4dJuilIx" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>basic paxos</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="axwVkIrajoC" parent-id="gGw1T9ReoD1" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>装载class的方式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="azTIwHKR8Qn" parent-id="ccwt_dCMvd3" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>通过zookeeper管理broker与consumer的动态加入与离开</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="b17nczNaGMB" parent-id="axwVkIrajoC" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>隐式：运行过程中，碰到new方式生成对象时，隐式调用classLoader到JVM</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="b5AOjo-OXQw" parent-id="gGw1T9ReoD1" rank="0002">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>当运行 java 虚拟机时，这个类加载器被创建，它负责加载虚拟机的核心类库，如 java.lang.* 等。例如 java.lang.Object 就是由根类加载器加载的。需要注意的是，这个类加载器不是用 java 语言写的，而是用 C/C++ 写的</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Bootstrap class loader</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="b6Skz-r6qEo" parent-id="msCSUs7gWut" rank="00fc">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>contextLoaded</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bBObunfPdbt" parent-id="oL9HlkAiv7o" rank="00fc">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>熟悉spring cloud, spring boot主流开发框架</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bBfpfFqNqoM" parent-id="pI2uYJwe4e9" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>存在时间更长的实例，对象多次回收没被清除，就从S1 搬到了tenured</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bN7oorVXr3j" parent-id="iG4HAo13u1b" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>ambassador模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bRoxYe_bHUS" parent-id="kuB56I7UobB" rank="00fc">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>容器是配置的单元，每个功能都可以更新，并且必要的时候能独立回滚。（但是要注意的是，最后一点好处也有不好的地方——总体系统的测试模型必须要考虑到在生产过程中所有的容器版本组合，这些版本可能会很大，因为容器总体上来说通常不能自动升级。当然，单一的应用程序没有这个问题，组件化的系统在某种程度上更容易测试，因为他们是在更小的可以独立测试的单元的基础上测试的）</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bTvI7YQl6I8" parent-id="h9d3rG-N4_3" rank="00fe">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>简化kafka设计</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bVGqZc46o0f" parent-id="j-wz1Om4dpW" rank="0006">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>Kafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中日志压缩功能为这种用法提供了条件。在这种用法中，Kafka类似于Apache BookKeeper项目</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>持久性日志（commit log）</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="baVn7CG08rX" parent-id="ccwt_dCMvd3" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>多个partition需要选取出lead partition，lead partition负责读写，并由zookeeper负责fail over</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bcBoR0lZsJw" parent-id="aWt9Fo8MXzl" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>docker</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bdi1SAfFtsI" parent-id="n0Ab7WDFZsP" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>kotlin</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bmqaogo8Dl1" parent-id="nkSAtqeK_hh" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>zero-copy：减少IO操作步骤</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bozFJALGeTk" parent-id="eGfO722Tnad" rank="0006">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>解释aop 模块</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="bqqasSiK8XF" parent-id="aUC1udiNQWi" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>在实际生产中，我们通常会使用guava cache做本地缓存+redis做分布式缓存+spring cache就集成缓存（底层使用redis来实现）的形式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="by0j7MZmE81" parent-id="l1zpjOeG6q1" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>很专一（专做缓存，这一点也是相较于Redis而言的）</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cAXcMnJg0Op" parent-id="cMCVhnntq0k" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>java的做法很聪明，我们称之为&quot;自适应&quot;的垃圾回收器，或者是&quot;自适应的、分代的、停止-复制、标记-清扫&quot;式垃圾回收器。它会根据不同的环境和需要选择不同的处理方式。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cAXzzIy51yo" parent-id="eGfO722Tnad" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>什么是spring</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cDSQFYM9a3E" parent-id="msCSUs7gWut" rank="00f9">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>Spring boot调run命令时候出发最先触发的事件就是starting事件</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>starting</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cKzGZLeQPBa" parent-id="hA6MMO7nvt6" rank="00fc">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>面向切面变成，将辅助支持功能于主程序业务逻辑隔离出来的变成范式。AOP于oop相互补充，通过oo实现项目，通过方面分别处理代码中的横切关注点</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>切面 AOP</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cLl1GcZXrHk" parent-id="oz7VQCbW1N8" rank="00f4">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Core module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cMCVhnntq0k" parent-id="aAU4irvwxCy" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>垃圾回收技术</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cOIDT9Z7K5C" parent-id="jYg5Ga4wEnx" rank="00fe">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring context</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cSVRXLeIhMb" parent-id="nBMupgzZgfN" rank="0003">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>当需要增加broker结点时，新增的broker会向zookeeper注册，而producer及consumer会根据注册在zookeeper上的watcher感知这些变化，并及时作出调整。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>可扩展性</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cVZsjF4tD8D" parent-id="oz7VQCbW1N8" rank="00f7">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Expression language module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cYJ9Bd9m-Yv" parent-id="oz7VQCbW1N8" rank="00f6">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Context module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ccwt_dCMvd3" parent-id="nBMupgzZgfN" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>负载均衡</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cgq25VtqXmi" parent-id="gGw1T9ReoD1" rank="0003">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>这个加载器加载出了基本 API 之外的一些拓展类。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Extension class loader</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ch5j2aV1dnT" parent-id="fk3_h1QbNdb" rank="" children-are-sections="yes">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>ZAB 协议是为分布式协调服务（Zookeeper）专门设计的一种支持故障恢复的原子广播协议。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>ZAB协议</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="csoH0klSjDT" parent-id="oz7VQCbW1N8" rank="00f5">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Bean module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="cwJJOahyDUE" parent-id="oL9HlkAiv7o" rank="00fb">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>JVM工作原理</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="d4USWG1SM3S" parent-id="j-wz1Om4dpW" rank="0001">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>Kafka的另一个应用场景是跟踪用户浏览页面、搜索及其他行为，以发布-订阅的模式实时记录到对应的topic里。那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或</lit>
          </run>
          <run>
            <lit><cell href="https://www.baidu.com/s?wd=%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" name="实时监控" type="link"/></lit>
          </run>
          <run>
            <lit>，或放到hadoop/离线数据仓库里处理。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>行为跟踪</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dI9KxZKFAKH" parent-id="aAU4irvwxCy" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>heap组成</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dK8Fk4GbZkh" parent-id="kaWdyXXm38U" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>zookeeper 集群节点有三种角色：leader、follower、observer</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dPGGzhSj29k" parent-id="oL9HlkAiv7o" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>熟悉消息队列等中间件原理</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dS9jaC2joIu" parent-id="n_vkMVsK3J6" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit><cell refid="att6" expanded="yes" name="bVmxl8"/></lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>程序员写的所有程序都被加载到运行时数据区域中，不同类别存放在heap, java stack, native method stack, PC register, method area.</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dX8eGkpnbNJ" parent-id="l1zpjOeG6q1" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>使用方便（这一点是相较于Redis在构建客户端的时候而言的，尽管redis的使用也不困难）</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dXb87bkwEbN" parent-id="aJ4UzCGmEpq" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>提供了基础的针对Web开发的集成特性，例如多方文件上传，利用Servlet listeners进行IoC容器初始化和针对Web的applicationContext.</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dYkt2rORm8G" parent-id="l2oFL34VWJv" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>鉴于上面的原因，Sun Hotspot JVM为了提升对象内存分配的效率，对于所创建的线程都会分配一块独立的空间，这块空间又称为</lit>
          </run>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.314447" g="0.477621" b="1"/>
              </value>
            </style>
            <lit>TLAB</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dbzNnB0U6wL" parent-id="ibeFtZfCr2P" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>work quene 模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dhVs_LI2P6C" parent-id="iG4HAo13u1b" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit> Sidecar 扩展并且提高了大多数的容器。比如，主容器可能是一个网页服务器，它可能跟“ logsaver ” sidecar 容器配对，然后 saidecar 容器从本地磁盘收集网页服务器的日志，并且将他们 stream 到集群存储系统。图 1 展示的就是 sidcar 模式的一个例子。另一个普遍的例子就是从本地磁盘内容服务的网页服务器，这个 sidecar 会定期跟 git 库进行内容管理系统或者其它数据源的存储进行同步。这两个例子在谷歌是十分普遍的。因为在同一个机器上的容器可以共享一个本地磁盘数据卷，所以 sidecar 是可能做的。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>sidecar模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dhYpIJSnd54" parent-id="dS9jaC2joIu" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Java虚拟机栈</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dhuxCmj6LRB" parent-id="dth6cgosSgH" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>启动kafka的server</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="diVNwluMa3w" parent-id="aUC1udiNQWi" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>redis缓存单独使用是为了弥补spring cache集成缓存的不灵活</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dkv2G4-X_I1" parent-id="msCSUs7gWut" rank="00fa">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>environmentPrepared</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dqs72D_duZP" parent-id="hA6MMO7nvt6" rank="00fe">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>spring web框架有着非常良好的设计</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>MVC Framework mvc框架 </lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dth6cgosSgH" parent-id="oE1ygWK5vPN" rank="0005">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit><cell refid="att0" expanded="yes" name="kafka-zk"/></lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>通过zk进行协调</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dy3zffTfAIT" parent-id="k-qBsC00zqa" rank="00fc">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>分布式系统开发模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dyIar64G4iu" parent-id="hgAkrzS2pZy" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>事件调度</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="dyJTQMJK3Ti" parent-id="dK8Fk4GbZkh" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>leader：通过选举产生的集群领导者；提供读写服务；</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="e4MsYGTcq7s" parent-id="ekwwPDDensF" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>RDB</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="e6MIkpne6N0" parent-id="fk3_h1QbNdb" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Leader 重新选举条件</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eDxrGQvdunB" parent-id="kaWdyXXm38U" rank="0008">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>最重要的功能：watcher</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eFbtVCLMhoE" parent-id="l2oFL34VWJv" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>New Generation 新生代</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eGRWVc3I76k" parent-id="dth6cgosSgH" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Producer生产数据，通过zk找到broker,再将数据push到broker进行保存</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eGfO722Tnad" parent-id="pYaT-PMxkfQ" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>chapter1</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eGv-AYiUs-t" parent-id="nBMupgzZgfN" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>设计要点</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eTsp9aa4T0g" parent-id="jYg5Ga4wEnx" rank="00fc">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring ORM</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eWW3OW9z9fU" parent-id="ccwt_dCMvd3" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>producer根据用户指定的算法，将消息发送到指定的partition</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ejkUNVKJWx7" parent-id="l2oFL34VWJv" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.314447" g="0.477621" b="1"/>
              </value>
            </style>
            <lit>TLAB</lit>
          </run>
          <run>
            <lit>仅作用于新生代的Eden Space，因此在编写Java程序时，通常多个小的对象比大的对象分配起来更加高效</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ekwwPDDensF" parent-id="hgAkrzS2pZy" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>有两种方式可以对缓存数据进行持久化</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="emmt2-xEY9K" parent-id="cMCVhnntq0k" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>停止-复制(stop and copy)。效率低，需要的空间大，优点，不会产生碎片。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eoA6FeiwKbw" parent-id="jYg5Ga4wEnx" rank="00f8">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit><cell refid="att8" expanded="yes" name="969110-20170211112337463-344280279"/></lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ep0wxZAlNc0" parent-id="cMCVhnntq0k" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>标记 - 清除算法 (mark and sweep)。速度较快，占用空间少，标记清除后会产生大量的碎片</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eqkrNqMFy5d" parent-id="msCSUs7gWut" rank="00fd">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>started</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="eroYSrkKGmP" parent-id="a-ISPmInuxl" rank="00ff3f">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>分布式缓存</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="esoRlFZLnPx" parent-id="gGw1T9ReoD1" rank="0004">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>加载应用程序和程序员自定义的类</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>AppClass Loader</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="etblvBT2rw6" parent-id="p-1RFoHZFhO" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>高级模块不应该依赖于低级模块，两者都应该取决于抽象</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="euTTz1M0AUG" parent-id="nkSAtqeK_hh" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>数据磁盘持久化：消息不在内存中cache，直接写入到磁盘，充分利用磁盘的顺序读写性能</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fDXlx8ugtLr" parent-id="a-ISPmInuxl" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>本地缓存</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fI19QxVWmrp" parent-id="ll_diTd77-o" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>简单的key-value，就是memcached可以存储的唯一的一种形式，接下来的四种是memcached不能直接存储的四种格式（当然理论上可以先将下面的一些数据结构中的东西封装成对象，然后存入memcached，但是不推荐将大对象存入memcached，因为memcached的单一value的最大存储为1M，可能即使采用了压缩算法也不够，即使够，可能存取的效率也不高，而redis的value最大为1G）</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>strings</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fIWoU3AWVCZ" parent-id="oL9HlkAiv7o" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>Mysql,linus,tomcat,redis,elasticsearch,javascript</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>熟悉常用组件</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fJ_LPHtBDiR" parent-id="nc-dc9n8qNn" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>leader 收到一半以上follower 的反馈之后，会向其他节点 发送commit，同时提交事务</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fJlJfqOf10y" parent-id="kaWdyXXm38U" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>zookeeper 为分布式应用提供了一个高效可靠的分布式协调服务</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fL-zJNA6646" parent-id="gkJkJShwKuZ" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>方法区和堆区域一样，是各个线程共享的内存区域，它用于存储每一个类的结构信息，例如运行时常量池，成员变量和方法数据，构造函数和普通函数的字节码内容，还包括一些在类、实例、接口初始化时用到的特殊方法。当开发人员在程序中通过Class对象中的getName、isInstance等方法获取信息时，这些数据都来自方法区</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fLIXqucp_Pi" parent-id="hgAkrzS2pZy" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>发布订阅等</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fN3PKwaE40-" parent-id="hA6MMO7nvt6" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>spring提供了一组方便的 API去转换比较特俗的异常，比如被 JDBc ,Hibernateor jdo扔出来的非受检异常</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Exception Handling 异常拦截</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fNgfZ61Qz1E" parent-id="pA9b16ZQZxa" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>提供面向切面编程的实现</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fO6seDA2cni" parent-id="nc-dc9n8qNn" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>leader 通过响应队列将proposal 分发到其他节点之后，等待反馈；follower 接收到proposal 之后写入本地日志，返回 ack</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fSdR-WUqg2z" parent-id="hu2vFo_r1s5" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>专指spring cache，spring cache自己继承了ehcache作为了缓存的实现类，我们也可以使用guava cache、memcached、redis自己来实现spring cache的底层。当然，spring cache可以根据实现类来将缓存存在本地还是存在远程机器上。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fTjp8m83OVK" parent-id="eGfO722Tnad" rank="0005">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>XMLBeanFactory</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fUJVZxrI-N9" parent-id="ll_diTd77-o" rank="0003">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>hashSet</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>sets</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fcRga51msfZ" parent-id="j-wz1Om4dpW" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统，如ActiveMR或RabbitMQ。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>消息队列</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fjZ_p-ohmw3" parent-id="iG4HAo13u1b" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>适配器模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fk3_h1QbNdb" parent-id="k-qBsC00zqa" rank="00ff" children-are-sections="yes">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>zookeeper</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fps183rZ1y3" parent-id="hA6MMO7nvt6" rank="00fa">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>spring是轻量的，基础版本的spring框架只有2MB</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>轻量</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fqtkOgMTqvG" parent-id="oL9HlkAiv7o" rank="00fe">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>熟悉常用缓存技术</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fs06bvrMJEW" parent-id="a_Plm2aPYih" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>主要是为了安全性，避免用户自己编写的类动态替换 Java 的一些核心类，比如 String，同时也避免了重复加载，因为 JVM 中区分不同类，不仅仅是根据类名，相同的 class 文件被不同的 ClassLoader 加载就是不同的两个类，如果相互转型的话会抛java.lang.ClassCaseException.</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fx7_iFJ9pWY" parent-id="ch5j2aV1dnT" rank="00fe">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>当系统启动或者leader 机器出现故障现象时，进入故障恢复模式并进行leader选举。选举产生的leader 会与过半的follower 进行数据同步。同步结束，退出故障恢复模式，进入消息广播模式；任意一台遵从ZAB协议的机器启动后，如果检测到leader 广播，都会自动进入故障恢复模式与leader 进行数据同步，同步之后，进入消息广播模式；非leader 接收到客户端事务请求时，会转发给leader 处理；</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fyFeylBlEK5" parent-id="jYg5Ga4wEnx" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Spring mvc</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="fyOe-VDYZNA" parent-id="msCSUs7gWut" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>callFailedListener</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="g46fQHZ1Ygj" parent-id="dS9jaC2joIu" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>本地方法栈</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gA8zJz-hHds" parent-id="mrQPhd3BfOB" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>提供spring 基本功能，工具类，其他比较基础的接口申明</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gBINuvGBWw2" parent-id="j-wz1Om4dpW" rank="0002">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>元信息监控</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gGmNmAETIEO" parent-id="pA9b16ZQZxa" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Spring AOP采用基于代理的AOP实现方案，AOP代理由Ioc容器负责生成、管理，依赖关系也一并由Ioc容器管理。尽管如此，Spring Ioc容器并不依赖于AOP，这样我们可以自由选择是否使用AOP。</lit>
          </run>
        </p>
        <p/>
      </text>
    </item>
    <item id="gGw1T9ReoD1" parent-id="aAU4irvwxCy" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>装载.class文件</lit>
          </run>
        </p>
        <p>
          <run>
            <lit><cell refid="att5" expanded="yes" name="bVk0W2"/></lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit> classloader</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gTpPnbZiCx2" parent-id="dS9jaC2joIu" rank="0005">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>运行时常量池</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gWJVxHaxp2-" parent-id="kaWdyXXm38U" rank="0005">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>zookeeper 集群节点总数为奇数</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gbplwWXea1F" parent-id="oz7VQCbW1N8" rank="00fb">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Java messaging service module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gkJkJShwKuZ" parent-id="dS9jaC2joIu" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>方法区</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gmYq3RZ6dy-" parent-id="oz7VQCbW1N8" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Web portlet module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gmqn0N74qaZ" parent-id="n9Qm0qZnjAQ" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Eden Space 任何新进入运行时数据区域的实例都会存放在此</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gtFcum8KGXV" parent-id="nkSAtqeK_hh" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>数据压缩</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gtgxs_A-nn-" parent-id="p-1RFoHZFhO" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>抽象不应该依赖于细节，细节应取决于抽象</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="gy17UyU8a8m" parent-id="kuB56I7UobB" rank="00fd">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>容器控制边界错误服务，使得整个系统能够正确推出（比如，网页服务器即使在日志保存运行失败的状态下也能够继续服务</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="h9d3rG-N4_3" parent-id="nBMupgzZgfN" rank="0002">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>由于kafka broker会持久化数据，broker没有内存压力，因此，consumer非常适合采取pull的方式消费数据</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>拉取系统</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hA6MMO7nvt6" parent-id="eGfO722Tnad" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring框架的长处是什么</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hAfYgVU51c_" parent-id="nMxGrTyCwmS" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>提供cglib生成asm的方法</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>cglib</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hCRB5nxOLHH" parent-id="cOIDT9Z7K5C" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>它是一个配置文件，为Spring提供上下文信息，提供了框架式的对象访问方法。Context为Spring提供了一些服务支持，如对国际化(i18n)、电子邮件、校验和调度功能。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hQxPuj1-W0e" parent-id="dth6cgosSgH" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>启动zk的server</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hR4IUEJAzW4" parent-id="ll_diTd77-o" rank="0001">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>hashTable</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>hashs</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hTWy9jfN87i" parent-id="onbz4PcZbC1" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>面相服务的架构体系（ SOA ）更新地比原来早，和基于容器的分布式系统共享很多特征。比如，都强调可重用的定义好的通过网络进行通信的接口的组件。另一方面， SOA 系统中的组件趋向于大粒度，相比于我们之前描述过的多容器模式，有更多的松耦合。此外， SOA 中的组件实施商务活动，我们在这里重点关注的组件类似于比较容易创建分布式系统的通用库。“微服务”这个词语最近出来，描述的是我们在这篇论文中讨论过的组件的类型。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hUviYjpvbQI" parent-id="jYg5Ga4wEnx" rank="00fd">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring DAO</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hfVK-8QWyrZ" parent-id="fTjp8m83OVK" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>通过 xml加载bean的基础方法，This container reads the configuration metadata from an XML file and uses it to create a fully configured system or application. </lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hgAkrzS2pZy" parent-id="eroYSrkKGmP" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>新一代的分布式缓存</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>redis</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hu2vFo_r1s5" parent-id="a-ISPmInuxl" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>集成缓存</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hxvj5PW05pv" parent-id="oE1ygWK5vPN" rank="0002">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>每个kafka实例被称为broker.</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>broker 中间的存储阵列 </lit>
          </run>
        </p>
      </text>
    </item>
    <item id="hxzifkqq-Zt" parent-id="aWt9Fo8MXzl" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>kubernetes</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="i85zb9vcuwA" parent-id="dy3zffTfAIT" rank="0005">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>相关工作</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="iAuilO3S_i5" parent-id="nkSAtqeK_hh" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>数据批量发送</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="iDrKZjrjsbu" parent-id="onbz4PcZbC1" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>标准化管理接口的概念要至少要追溯到 SNMP 。 SNMP 主要关注管理硬件组件，而且现在还没有出现用来管理微服务／基于容器的系统。这还是没能阻止许多容器管理系统的开发，包括 Aurora ， ECS ， Docker Swarm ， Kubernetes ， Marathon 和 Nomad </lit>
          </run>
        </p>
      </text>
    </item>
    <item id="iG4HAo13u1b" parent-id="dy3zffTfAIT" rank="0002">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>容器管理系统支持同时运行多个容器作为一个整体单元，所以抽象（ Kubernetes 叫它“ pods ”， Nomad 叫它“ task groups ”）是一个用来启动我们之前描述过的模式的必需功能。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>单节点多容器应用模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="iVR1X0nto_3" parent-id="cAXzzIy51yo" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring是java企业级开源解决框架，spring框架的核心功能能被用来开发任意java程序，也有一些扩展是java web平台顶级开源方案。框架的目标是让java更易于使用。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="iYuE39GcqEe" parent-id="nc-dc9n8qNn" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>每个事务proposal 有一个递增的全局唯一的ID，事务ID（ZXID)</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="iZRsqirjSlx" parent-id="kaWdyXXm38U" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>实现依赖于ZAB 协议，实现了一种主备模式的架构来保持集群的数据一致性；</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ibeFtZfCr2P" parent-id="dy3zffTfAIT" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>多节点应用程序模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ieEC6muFpjx" parent-id="e6MIkpne6N0" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>与leader 保持连接的机器少于一半</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ipaHpxHAE1-" parent-id="n9Qm0qZnjAQ" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>S1 Survivor Space 同理，存在时间更长的实例，就从S0 搬到了S1</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ir6pgjqmK2Z" parent-id="j86GQGkTKJv" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>GC有关的是: runtime data area 中的 heap（对象实例会存储在这里） 和 gabage collector方法。</lit>
          </run>
        </p>
        <p>
          <run>
            <lit>程序运行期间，所有对象实例存储在运行时数据区域的heap中，当一个对象不再被引用（使用），它就需要被收回。在GC过程中，这些不再被使用的对象从heap中收回，这样就会有空间被循环利用。</lit>
          </run>
        </p>
        <p>
          <run>
            <lit>GC为内存中不再使用的对象进行回收，GC中调用回收的方法--收集器garbage collector. 由于GC要消耗一些资源和时间，Java 在对对象的生命周期特征（eden or survivor）进行分析之后，采用了分代的方式进行对象的收集，以缩短GC对应用造成的暂停。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="it1GBOxI5d_" parent-id="aAU4irvwxCy" rank="00ff">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit> 执行字节码，或者执行本地方法</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>执行引擎</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="iua9ka3VN7i" parent-id="hA6MMO7nvt6" rank="00fd">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>spring 管理程序对象容器的生命周期</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>容器  container</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ivcPwHQ3v3x" parent-id="dhYpIJSnd54" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>与 PC 一样，java 虚拟机栈也是线程私有的。每一个 JVM 线程都有自己的 java 虚拟机栈，这个栈与线程同时创建，它的生命周期与线程相同。虚拟机栈描述的是Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="iwhVjsMSCY5" parent-id="oE1ygWK5vPN" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Producer 消息的发布者</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="j-wz1Om4dpW" parent-id="nkAAru-JU2k" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>使用场景</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="j1DDkWpakL4" parent-id="eGv-AYiUs-t" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>采用linux Zero-Copy提高发送性能。传统的数据发送需要发送4次</lit>
          </run>
          <run>
            <lit><cell href="https://www.baidu.com/s?wd=%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" name="上下文切换" type="link"/></lit>
          </run>
          <run>
            <lit>，采用sendfile系统调用之后，数据直接在内核态交换，系统上下文切换减少为2次。根据测试结果，可以提高60%的数据发送性能。Zero-Copy详细的技术细节可以参考：</lit>
          </run>
          <run>
            <lit><cell href="https://developer.ibm.com/articles/j-zerocopy/?mhq=zerocopy&amp;mhsrc=ibmsearch_a" name="https://developer.ibm.com/articles/j-zerocopy/?mhq=zerocopy&amp;mhsrc=ibmsearch_a" type="link"/></lit>
          </run>
        </p>
      </text>
    </item>
    <item id="j86GQGkTKJv" parent-id="aAU4irvwxCy" rank="0001">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>java 与 C语言相比的一个优势是，可以通过自己的JVM自动分配和回收内存空间。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>GC</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jEVc-m7A-KQ" parent-id="jK_X2IISKCC" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring-core</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jIsfhf8KDux" parent-id="k6qbHVca5md" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>某Server首先向所有Server提议自己要成为leader，一周期后，如果没有被选择为leader，则根据收到的回复信息，更新自己的投票，重新发起提议（这次推荐其他server，zxid最大的 ），不断重复，直至选出leader</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jK_X2IISKCC" parent-id="jQtkoyy049t" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>依赖模块</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jM52vb7YL4-" parent-id="oL9HlkAiv7o" rank="00fd">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>熟悉分布式系统开发模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jQtkoyy049t" parent-id="jYg5Ga4wEnx" rank="00fa">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>提供java bean的声明</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Spring beans</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jRkOu1UShtC" parent-id="oz7VQCbW1N8" rank="00f8">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Jdbc module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jSIJQhWsuXx" parent-id="oz7VQCbW1N8" rank="00f9">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Orm module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jTSmL8kZhqY" parent-id="msCSUs7gWut" rank="00fb">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>contextPrepared</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jUtjK-Pq2eX" parent-id="gkJkJShwKuZ" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>方法区也是全局共享的，在虚拟机启动时候创建。在一定条件下它也会被GC。这块区域对应Permanent Generation 持久代。 XX：PermSize指定大小。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jXai-kPse-h" parent-id="j86GQGkTKJv" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>因为垃圾回收gc只能回收通过new关键字申请的内存（在堆上），但是堆上的内存并不完全是通过new申请分配的。还有一些本地方法（一般是调用的C方法）。这部分“特殊的内存”如果不手动释放，就会导致内存泄露，gc是无法回收这部分内存的。</lit>
          </run>
        </p>
        <p>
          <run>
            <lit>所以需要在finalize中用本地方法(native method)如free操作等，再使用gc方法。显示的GC方法是system.gc()</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jYg5Ga4wEnx" parent-id="nInS89x6rHE" rank="00ee">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring框架核心模块作用</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jdpYri-N8DY" parent-id="kuB56I7UobB" rank="00fe">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>容器是重复使用的单元，所以 sidecar 容器可以跟很多不同的主容器（比如 logsaver 容器可以被任意产生日志的组件使用）</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="je6XtMn7Bgf" parent-id="kaWdyXXm38U" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>zookeeper 将数据全部存储在内存中并且集群中任意一台机器都可以响应客户端读操作，因此它更适合用以读操作为主的场景；</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jgs05AW2do8" parent-id="nc-dc9n8qNn" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>只允许有一个主进程（leader）接收事务请求并处理。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="jmQnN7fjszF" parent-id="peFle0OntVk" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>新生代 Young Generation 使用将 Eden 还有 Survivor 内的数据利用 semi-space 做复制收集（Copying collection）， 并将原本 Survivor 内经过多次垃圾收集仍然存活的对象移动到 Tenured</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="joIJoiFe4-i" parent-id="kaWdyXXm38U" rank="0006">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>zookeeper 数据节点类型：持久节点（只能采用删除操作清除该节点）、临时节点（其生命周期取决于session 是否失效）、顺序节点（子节点顺序表，节点名有数字后缀）</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="k-qBsC00zqa" parent-id="oH_yt0FVDuw" rank="00fa" children-are-sections="yes">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>准备</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="k192a65ShPU" parent-id="dy3zffTfAIT" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>MapReduce 模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="k3PJp3YakZn" parent-id="mAZ0XK5IWFQ" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>在使用jsp的时候，我们会将一些复杂的页面使用Oscache进行页面缓存，使用非常简单，就是几个标签的事儿；但是，现在一般的企业，前台都会使用velocity、freemaker这两种模板引擎，本身速度就已经很快了，页面缓存使用的也就很少了。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="k6qbHVca5md" parent-id="lWr4dJuilIx" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>fast paxos</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="k9srxpGhgw0" parent-id="lEctlHsbn6d" rank="0002">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>提供了spring核心的 taskexecutor的抽象方法，提供了 SyncTaskExecutor，SimpleAsyncTaskExecutor</lit>
          </run>
        </p>
        <p>
          <run>
            <lit>的实现</lit>
          </run>
        </p>
        <p/>
      </text>
      <text>
        <p>
          <run>
            <lit>task</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kKL-Uhook7D" parent-id="kuB56I7UobB" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>容器是打包的单元，所以将服务和日志保存分到不同的容器可以让两个独立的编程团队之间的可靠性分开，并且允许他们独立测试，跟一起测试的时候是一样的。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kLyk2kkDSL4" parent-id="dy3zffTfAIT" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>单个容器管理模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kMfEVKQWlRL" parent-id="l2oFL34VWJv" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Old Generation 旧生代</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kXgsF0ZzbLi" parent-id="n9Qm0qZnjAQ" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>S0 Suvivor Space 存在时间较长，经过垃圾回收没有被清除的实例，就从Eden 搬到了S0</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ka-KapZSpq2" parent-id="fDXlx8ugtLr" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Oscache:最经典简单的页面缓存</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kaWdyXXm38U" parent-id="fk3_h1QbNdb" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>主要功能</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kcRWUIqL8L4" parent-id="l2oFL34VWJv" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>堆在JVM是所有线程共享的，因此在其上进行对象内存的分配均需要进行加锁，这也是new开销比较大的原因</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kd8X_HrXG0P" parent-id="aUC1udiNQWi" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring cache集成缓存是为了简单便捷的去使用缓存（以注解的方式即可），使用redis做其实现类是为了可以存更多的数据在机器上</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="keH_0z-gakF" parent-id="lEctlHsbn6d" rank="0001">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>为spring提供接口类型转换 </lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.366783" g="0.447028" b="1"/>
              </value>
            </style>
            <lit>convert</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kofiiO3_FzR" parent-id="lwleJv34MyS" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>当前 classLoader 的缓存中没有找到被加载的类的时候，委托父类加载器去加载，父类加载器采用同样的策略，首先查看自己的缓存，然后委托父类的父类去加载，一直到 bootstrap ClassLoader.</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kreJzjCIcFw" parent-id="mIvCrZv546f" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>基础的spring module，提供了spring框架的基本功能，beanfactory是spring应用的基础 </lit>
          </run>
        </p>
      </text>
    </item>
    <item id="krhIYzRpgO1" parent-id="nkSAtqeK_hh" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Topic划分为多个partition，提高parallelism</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kuB56I7UobB" parent-id="dhVs_LI2P6C" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>分开容器的好处</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kuEgh3YxrlP" parent-id="ccwt_dCMvd3" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>存在多个partiiton，每个partition有自己的replica，每个replica分布在不同的Broker节点上</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="kwpiILaT4nS" parent-id="peFle0OntVk" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit><cell refid="att7" expanded="yes" name="bVkZav"/></lit>
          </run>
        </p>
      </text>
    </item>
    <item id="l1zpjOeG6q1" parent-id="eroYSrkKGmP" rank="0001">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>分布式缓存的标配</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>memcached</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="l2oFL34VWJv" parent-id="dS9jaC2joIu" rank="0003">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>被所有线程共享的一块存储区域，在虚拟机启动时创建，它是JVM用来存储对象实例以及数组值的区域，可以认为Java中所有通过new创建的对象的内存都在此分配</lit>
          </run>
        </p>
        <p>
          <run>
            <lit>Java堆在JVM启动的时候就被创建，堆中储存了各种对象，这些对象被自动管理内存系统（Automatic Storage Management System，也即是常说的 “Garbage Collector（垃圾回收器）”）所管理。这些对象无需、也无法显示地被销毁。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Java堆</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="l4MhKYWqxfE" parent-id="eGv-AYiUs-t" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>显式分布式，即所有的producer、broker和consumer都会有多个，均为分布式的。Producer和broker之间没有负载均衡机制。broker和consumer之间利用zookeeper进行负载均衡。所有broker和consumer都会在zookeeper中进行注册，且zookeeper会保存他们的一些元数据信息。如果某个broker和consumer发生了变化，所有其他的broker和consumer都会得到通知。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="l8zKaaoBy0N" parent-id="eGv-AYiUs-t" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>直接使用linux 文件系统的cache，来高效缓存数据</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lADcuTeCy4P" parent-id="oz7VQCbW1N8" rank="00fc">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Transaction module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lAnLV6eTHN-" parent-id="kuB56I7UobB" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>容器是资源账户和分配的单元，那么比如一个网页服务器容器的 cgroup 可以被配置，那样的话，它就会提供持续的低延迟反应到问题，虽然 logsaver 容器在网页服务器不忙的时候被配置来清除空闲 CPU 周期</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lEctlHsbn6d" parent-id="mrQPhd3BfOB" rank="00013f">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>模块</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lMOnsZtRs0Q" parent-id="aAU4irvwxCy" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Java 不同的世代使用不同的 GC 算法</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lMRMwA6rxP8" parent-id="g46fQHZ1Ygj" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>与虚拟机栈的作用相似，虚拟机栈为虚拟机执行执行java方法服务，而本地方法栈则为虚拟机使用到的本地方法服务</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lMybVEpSzIp" parent-id="apu8UtSzyef" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Leader选举：选择ZXID 最大的节点作为Leader</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lQ1JhdmXLiH" parent-id="kaWdyXXm38U" rank="0009">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>开源客户端：zkclient、curator</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lUjKJpOeNXF" parent-id="dI9KxZKFAKH" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Perm 存放运行时数据区的方法区</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lW2tjY7VlBU" parent-id="p3yUNEQ4iXk" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>BeanFactory是ioc的一个工厂 ，最经常使用的是 XmlBeanFactory</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lWr4dJuilIx" parent-id="ibeFtZfCr2P" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>分布式系统中常见问题之一就是 leader 选举。副本被普遍使用在一个组件的多个相同的实例之间共享负载，副本的另一个更加复杂的作用就是在应用程序需要区分副本跟设置来作为“ leader ”。其它的副本对于快速取代 leader 的位置是十分快速的，如果之前的副本失败了的话。一个系统甚至可以平行运行多个 leader 选举</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>leader选举模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lcKJd02VHp6" parent-id="n0Ab7WDFZsP" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>java</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lf3adTyqaVZ" parent-id="h9d3rG-N4_3" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>consumer根据自身情况自主选择消费模式，例如批量，重复消费，从尾端开始消费等</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lheZ0ZvzLfZ" parent-id="msCSUs7gWut" rank="00fe">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>running</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="liYnu9PHtJb" parent-id="aUC1udiNQWi" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>如果需要使用分布式缓存，那么首先redis是必选的，因为在实际开发中，我们会缓存各种各样的数据类型，在使用了redis的同时，memcached就完全可以舍弃了，但是现在还有很多公司在同时使用memcached和redis两种缓存</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lk2OFn2hxVQ" parent-id="kaWdyXXm38U" rank="0007">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>zookeeper 每个节点都有 Stat 结构（数据节点的所有状态信息）</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ll_diTd77-o" parent-id="hgAkrzS2pZy" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>可以存储复杂的数据结构（5种）</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lmeYGWP-7mH" parent-id="n0Ab7WDFZsP" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>groovy</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lwleJv34MyS" parent-id="mqUHiUcB0I6" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>过程</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="lx6-q2l-0Du" parent-id="gTpPnbZiCx2" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>其空间从方法区中分配，存放的为类中固定的常量信息、方法和域的引用信息。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="m4_wJKsVLsa" parent-id="j-wz1Om4dpW" rank="0004">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>这个场景可能比较多，也很好理解。保存收集流数据，以提供之后对接的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从RSS数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。Strom和Samza是非常著名的实现这种类型数据转换的框架</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>流处理</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="m4tQe10SO-m" parent-id="pfyAP2S6mNq" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>保证已经在leader 机器上提交的事务最终被所有机器提交</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="mAZ0XK5IWFQ" parent-id="a-ISPmInuxl" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>页面缓存</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="mIvCrZv546f" parent-id="eGfO722Tnad" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>解释一下core container(Application context) module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="mKQEwiGRX5S" parent-id="keH_0z-gakF" rank="0001">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>注册converter</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>ConverterRegistry</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="mPkR9ZIYnCO" parent-id="keH_0z-gakF" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>T convert(S source);</lit>
          </run>
        </p>
        <p/>
      </text>
      <text>
        <p>
          <run>
            <lit>Converter接口</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="m_GfNGCDr_7" parent-id="hA6MMO7nvt6" rank="00ff">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>spring提供了一组书屋管理接口能降级到 本地食物或者扩容到全局食物</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Transaction Management 事务管理</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="mevRABiXhRE" parent-id="j-wz1Om4dpW" rank="0005">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>事件源是一种应用程序设计的方式，该方式的状态转移被记录为按时间顺序排序的记录序列。Kafka可以存储大量的日志数据，这使得它成为一个对这种方式的应用来说绝佳的后台。比如动态汇总（News feed）</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>事件源</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="mmaL0MICJQ9" parent-id="e6MIkpne6N0" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Leader 宕机或故障</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="mqUHiUcB0I6" parent-id="gGw1T9ReoD1" rank="0001">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>该模型要求除了顶层的Bootstrap class loader启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>双亲委派模型（Parent Delegation Model)</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="mrQPhd3BfOB" parent-id="jYg5Ga4wEnx" rank="00f9">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring core</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="msCSUs7gWut" parent-id="nInS89x6rHE" rank="00f8">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>SpringApplicationRunListeners启动触发事件</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="mz8QTg-Tehb" parent-id="awEg-8LOAHH" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>当前server向集群内所有server发起询问，得到回复，统计其他server推荐的leader，选择zxid最大的作为推荐leader，如果同时该server拥有超过半数的支持，则把它作为leader，修改自己的信息；如果没有获得半数以上支持则再次发起询问，直至得到leader信息</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="n0Ab7WDFZsP" parent-id="jQtkoyy049t" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>涉及语言</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="n2e6Ezi6wN4" parent-id="fyFeylBlEK5" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>提供了Web应用的MVC实现。Spring的MVC框架并不是仅仅提供一种传统的实现，它提供了一种清晰的分离模型，在领域模型代码和web form之间。并且，还可以借助Spring框架的其他特性</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="n9Qm0qZnjAQ" parent-id="dI9KxZKFAKH" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Young Generation</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nBMupgzZgfN" parent-id="nkAAru-JU2k" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>设计</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nCg1IayOfzG" parent-id="ll_diTd77-o" rank="0004">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>底层是一个skipList</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>sorted sets</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nGf9fgGKA-p" parent-id="oz7VQCbW1N8" rank="00fa">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Oxm module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nInS89x6rHE" rank="0001" children-are-sections="yes">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>SpringApplication的启动过程分析</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <style>
              <value key="paragraph-alignment">left</value>
            </style>
            <lit>Spring Boot源码阅读</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nMxGrTyCwmS" parent-id="lEctlHsbn6d" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>提供asm class的方法</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>asm</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nNuBDRIDaNl" parent-id="l1zpjOeG6q1" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>经典的一致性hash算法</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nVBwb30Kvex" parent-id="hUviYjpvbQI" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>简化 dao 开发步骤，以一致的方式使用数据库访问技术，使用统一的方式调用事务管理，避免具体的实现侵入业务逻辑层的代码</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nVWe22l1Lnd" parent-id="dK8Fk4GbZkh" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>follower：提供读服务；参与leader 选举和写操作“过半写成功”策略；</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="n_vkMVsK3J6" parent-id="aAU4irvwxCy" rank="00ff3f">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>JVM 运行时数据区 (JVM Runtime Area) 其实就是指 JVM 在运行期间，其对JVM内存空间的划分和分配。JVM在运行时将数据划分为了6个区域来存储。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>runtime data area</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nc-dc9n8qNn" parent-id="ch5j2aV1dnT" rank="00ff">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit><cell refid="att3" expanded="yes" name="1308544-20171229133115882-1511607238"/></lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>消息广播</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nkAAru-JU2k" parent-id="k-qBsC00zqa" rank="00fe">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>Kafka是由</lit>
          </run>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.375704" g="0.376857" b="1"/>
              </value>
            </style>
            <lit>LinkedIn</lit>
          </run>
          <run>
            <lit>开发的一个分布式的消息系统，使用</lit>
          </run>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.375704" g="0.376857" b="1"/>
              </value>
            </style>
            <lit>Scala</lit>
          </run>
          <run>
            <lit>编写，它以可</lit>
          </run>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.375704" g="0.376857" b="1"/>
              </value>
            </style>
            <lit>水平扩展</lit>
          </run>
          <run>
            <lit>和</lit>
          </run>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.375704" g="0.376857" b="1"/>
              </value>
            </style>
            <lit>高吞吐率</lit>
          </run>
          <run>
            <lit>而被广泛使用.</lit>
          </run>
        </p>
        <p>
          <run>
            <lit>Kafka存储是基于硬盘存储的，一个 67200rpm STAT RAID5 的阵列，线性读写速度是 300MB/sec，如果是随机读写，速度则是 50K/s。kafka却通过</lit>
          </run>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.375704" g="0.376857" b="1"/>
              </value>
            </style>
            <lit>线性读写</lit>
          </run>
          <run>
            <lit>的方式实现快速地读写</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>kafka</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="nkSAtqeK_hh" parent-id="nBMupgzZgfN" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>高吞吐是kafka需要实现的核心目标之一</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>吞吐量</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="o-LZot6ZoB4" parent-id="ibeFtZfCr2P" rank="0002">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>一个外部客户发送一个初始请求到“ root ”或者“ parent ”节点。这个 root 将请求分散到很多很多服务器上来执行平行计算。每个碎片返回部分数据， root 将这个数据收集起来归成单个的回应到原始请求。这个模式在搜索引擎中是十分普遍的。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Scatter/gather 模式</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="o3x-dbx7fbQ" parent-id="cMCVhnntq0k" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>引用计数法。简单但速度很慢。缺陷是：不能处理循环引用的情况</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="o61IZpA8IlZ" parent-id="ekwwPDDensF" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>AOF</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="oE1ygWK5vPN" parent-id="nkAAru-JU2k" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>组件</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="oH_yt0FVDuw" rank="" children-are-sections="yes">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>java基础</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="oJcfogXBjdc" parent-id="aQSLETesVvx" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器, NAMELY存储每个线程下一步将执行的JVM指令，如该方法为native的，则PC寄存器中不存储任何信息。Java 的多线程机制离不开程序计数器，每个线程都有一个自己的PC，以便完成不同线程上下文环境的切换</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="oL9HlkAiv7o" parent-id="oH_yt0FVDuw" rank="00f3">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>要求</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="oTA6lokoWWQ" parent-id="msCSUs7gWut" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>failed</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="oTo_GXSWrLW" parent-id="j-wz1Om4dpW" rank="0003">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或HDFS）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比起以日志为中心的系统比如Scribe或者Flume来说，Kafka提供同样高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>日志收集</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ocd6JOtwHx_" parent-id="lwleJv34MyS" rank="">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>每个类加载器都有自己的加载缓存，当一个类被加载了以后就会放入缓存，</lit>
          </run>
        </p>
        <p>
          <run>
            <lit>等下次加载的时候就可以直接返回了。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>当前 ClassLoader 首先从自己已经加载的类中查询是否此类已经加载，如果已经加载则直接返回原来已经加载的类。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ogLwfcdpiFg" parent-id="fDXlx8ugtLr" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Google guava cache</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="onbz4PcZbC1" parent-id="i85zb9vcuwA" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit> 面向服务的架构体系（SOA）</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="osdyYhR_AZk" parent-id="aUC1udiNQWi" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>guava cache使用在更快的获取缓存数据，同时缓存的数据量并不大的情况</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ovPCGIe5AE0" parent-id="ll_diTd77-o" rank="0002">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>LinkedList</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>lists</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="oz7VQCbW1N8" parent-id="eGfO722Tnad" rank="0002">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>Spring framework basic module</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>spring框架的模块有哪些</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="p-1RFoHZFhO" parent-id="hA6MMO7nvt6" rank="00fb">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>由对象提供提供其依赖关系，而不是创建或查找依赖关系</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>控制反转 IOC</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="p3yUNEQ4iXk" parent-id="eGfO722Tnad" rank="0004">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>BeanFactory. BeanFactory实现的例子</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="p70j21DfGjv" parent-id="pfyAP2S6mNq" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>丢弃只在leader 机器上被提出的事务</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="p94PAZ4oeY9" parent-id="axwVkIrajoC" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>显式：通过class.forname()动态加载</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pA9b16ZQZxa" parent-id="jYg5Ga4wEnx" rank="00fb">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>spring aop</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pI2uYJwe4e9" parent-id="dI9KxZKFAKH" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>旧生代 Old Generation/tenured</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pV4u-hUvxWO" parent-id="eGv-AYiUs-t" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>数据在磁盘上存取代价为O(1)。kafka以topic来进行消息管理，每个topic包含多个partition，每个partition对应一个逻辑log，有多个segment组成。每个segment中存储多条消息，消息id由其逻辑位置决定，即从消息id可直接定位到消息的存储位置，避免id到位置的额外映射。每个partition在内存中对应一个index，记录每个segment中的第一条消息偏移。发布者发到某个topic的消息会被均匀的分布到多个part上（随机或根据用户指定的回调函数进行分布），broker收到发布消息往对应part的最后一个segment上添加该消息，当某个segment上的消息条数达到配置值或消息发布时间超过阈值时，segment上的消息会被flush到磁盘，只有flush到磁盘上的消息订阅者才能订阅到，segment达到一定的大小后将不会再往该segment写数据，broker会创建新的segment</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pVKGNHUud-w" parent-id="j86GQGkTKJv" rank="00fe">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>垃圾回收机制是由垃圾收集器Garbage Collection GC来实现的，GC是后台的守护进程。它的特别之处是它是一个低优先级进程，但是可以根据内存的使用情况动态的调整他的优先级。因此，它是在内存中低到一定限度时才会自动运行，从而实现对内存的回收。这就是垃圾回收的时间不确定的原因。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pYaT-PMxkfQ" parent-id="nInS89x6rHE" rank="00ec" children-are-sections="yes">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>一些关于spring的重要问题的汇总，这些问题清单从，All core modules, from basic Spring functionality such as Spring Beans, up to Spring MVC framework are presented and described in short. After checking the interview questions, you should check our Spring Tutorials page.</lit>
          </run>
        </p>
        <p>
          <run>
            <lit><cell href="http://www.javacodegeeks.com/tutorials/java-tutorials/enterprise-java-tutorials/spring-tutorials/" name="http://www.javacodegeeks.com/tutorials/java-tutorials/enterprise-java-tutorials/spring-tutorials/" type="link"/></lit>
          </run>
          <run>
            <lit> </lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Spring 重要的一些问题</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pYvKMQiJrH5" parent-id="apu8UtSzyef" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>数据同步：leader 为每个follower 创建一个队列，将没有被各个follower 提交的事务 proposal填入各个队列，并分发给follower。follower 事务同步以后，leader会将它加入到真正可用follower 列表中。</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="peFle0OntVk" parent-id="lMOnsZtRs0Q" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Minor collection</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pfyAP2S6mNq" parent-id="ch5j2aV1dnT" rank="">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>故障恢复</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="poB4zBJ1wNY" parent-id="oz7VQCbW1N8" rank="00ff">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>Web structs module</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pqkhtJu4DhN" parent-id="l1zpjOeG6q1" rank="0001">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>基于</lit>
          </run>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.314447" g="0.477621" b="1"/>
              </value>
            </style>
            <lit>slab</lit>
          </run>
          <run>
            <lit>的内存模型有效防止内存碎片的产生（但同时也需要估计好启动参数，否则会浪费很多的内存</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="prM4zGJxEgX" parent-id="oE1ygWK5vPN" rank="0004">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Partition topic的物理分组</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pt04K2aqvxi" parent-id="dK8Fk4GbZkh" rank="0002">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>observer：提供读服务；不影响集群写性能的前提下提升集群的读性能；</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pt5tCqA_K14" parent-id="dth6cgosSgH" rank="0003">
      <checkbox>unchecked</checkbox>
      <entry/>
      <text>
        <p>
          <run>
            <lit>consumer通过zk找到broker，在主动pull数据</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="ptqO9GHX6m3" parent-id="oE1ygWK5vPN" rank="0003">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.375704" g="0.376857" b="1"/>
              </value>
            </style>
            <lit>Topic</lit>
          </run>
          <run>
            <lit>是学习kafka的</lit>
          </run>
          <run>
            <style>
              <value key="font-fill">
                <color space="srgb" r="0.375704" g="0.376857" b="1"/>
              </value>
            </style>
            <lit>关键</lit>
          </run>
          <run>
            <lit>，每个topic被分成多个partition,每条消息在partition中位置被称为offset.类型为long型数字。</lit>
          </run>
          <run>
            <style>
              <value key="underline-style">single</value>
            </style>
            <lit>消息即使被消费了，也不会被立即删除</lit>
          </run>
          <run>
            <lit>，而是根据broker里的设置，保存一定时间后再清除，比如log文件设置存储两天，则两天后，不管消息是否被消费，都清除。</lit>
          </run>
          <run>
            <lit><cell refid="att1" expanded="yes" name="topic"/></lit>
          </run>
          <run>
            <lit><cell refid="att2" expanded="yes" name="message"/></lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>Topic kafka在消息保存的时候根据topic归类</lit>
          </run>
        </p>
      </text>
    </item>
    <item id="pwOjcVj1vF3" parent-id="oE1ygWK5vPN" rank="0001">
      <checkbox>unchecked</checkbox>
      <text>
        <p>
          <run>
            <lit>每个consumer属于一个consumer group。在kafka中，一个partition的消息只会被group中的一个consumer消费；可以认为一个group就是一个“订阅者”。一个Topic中的每个partition只会被一个“订阅者”中的一个consumer消费。</lit>
          </run>
        </p>
      </text>
      <text>
        <p>
          <run>
            <lit>consumer 消息的订阅者</lit>
          </run>
        </p>
      </text>
    </item>
  </items>
</outline>
